#+TITLE:exploratory analysis template 
#+AUTHOR: Ivan Hanigan
#+email: ivan.hanigan@anu.edu.au
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper]
#+LATEX: \tableofcontents
-----
* Introduction
This is designed to create code snippets.  These can be used as standalone R scripts or incorporated into complicated workflows such as ProjectTemplage.
* R
** exploratory_analysis_template
*** exploratory_analysis_template
#+name:exploratory_analysis_template
#+begin_src R :session *R* :tangle R/exploratory_analysis_template.r :exports none :eval no
  ################################################################
  exploratory_analysis_template <- function(
      projdir = ""
    ,
      packagedir =  ""
    ,
      outfile = ""
    ,
      indir = ""
    ,
      infile = ""
    ,
      titl = ""
    ,
      show_header = T
    ,
      show_geo = F
    ,
      minimal = T
    ,
      rmarkdown = !minimal
    ,
      show_eml = T
      ){
  txt0 <- load_template()
  txt1 <- cleaning_template(datevar = "date")
  txt2 <- data_dictionary_template()
  txt3 <- taxonomic_template(target_col = "species")
  txt <- paste(txt0, txt1, txt2, txt3)
  if(show_header){
    hd <- header_template(titl=titl, projdir=projdir, packagedir=packagedir, outfile=outfile, indir=indir, infile=infile)
    txt <- paste(hd, txt) 
  }
  if(show_geo){
    geo <- geographic_template(titl=titl, indir=indir)
    txt <- paste(txt, geo) 
  }
  if(show_eml){
    eml <- eml_template()
    txt <- paste(txt, eml) 
  }
    
  # cat(txt)
  
  return(txt)
  }
    
#+end_src
*** test-exploratory_analysis_template
#+name:exploratory_analysis_template
#+begin_src R :session *R* :tangle tests/test-exploratory_analysis_template.r :exports none :eval yes
  ################################################################
  # name:exploratory_analysis_template
  library(devtools)
  load_all()
  ## textdata <- exploratory_analysis_template(
  ##   projdir = "~/tools/exploratory_analysis_template"
  ## ,
  ##   packagedir =  "tests"
  ## ,
  ##   outfile = "test_eda.csv"
  ## ,
  ##   indir = "~/tools/exploratory_analysis_template/inst/extdata"
  ## ,
  ##   infile = "taxonomic_dummy_data.csv"
  ## ,
  ##   titl = "Testing taxonomic review code snippet"
  ## ,
  ##   show_header = T
  ## ,
  ##   show_geo = T
  ##   )
  ## cat(textdata)
  ## # check the codes, if ok sink to a r markdown script
  ## sink("tests/test_taxo_review.Rmd")
  ## cat(textdata)
  ## sink()
  
      textdata <- exploratory_analysis_template(
        projdir = "~/path/to/project",
        packagedir =  "a_package_is_a_discrete_chunk_of_work",
        outfile = "this_is_the_result.csv",
        indir = "~/path/to/input/data",
        infile = "this_is_the_input_data.csv",
        titl = "Title of the code snippet",
        show_header = TRUE, show_eml = TRUE)
      cat(textdata)
#+end_src

#+RESULTS: exploratory_analysis_template

*** man-exploratory_analysis_template
#+name:exploratory_analysis_template
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:exploratory_analysis_template

#+end_src
** header_template
*** R-header_template
#+name:header_template
#+begin_src R :session *R* :tangle R/header_template.r :exports none :eval no
  ################################################################
  header_template <- function(titl, projdir, packagedir, outfile, indir, infile, libraries = c("sqldf")){
  #  ```{r echo = T, results = "asis", eval = T}
  hd <- sprintf('
  "
  %s
  ---
  "
  
  # Project: temp123
  # Author: Your Name
  # Maintainer: Who to complain to <yourfault@somewhere.net>
  
  #### Set any global variables here ####
  projdir <- "%s"
  outdir <- file.path(projdir, "%s")
  # if(!file.exists(outdir)) dir.create(outdir)
  outfile <- "%s"
  file.path(outdir, outfile) 
  setwd(outdir)
  
  #### Load any needed libraries #### 
  library(gdata)
  library(disentangle)
  library(EML)
  library(sqldf)
  library(taxize)
  indir <- "%s"
  
  #### Identify your data inputs ####
  dir(indir)
  infile <- "%s"
  
  ', titl, projdir, packagedir, outfile, indir, infile
  )
  # ```
  return(hd)
  }
#+end_src
*** test-header_template
#+name:header_template
#+begin_src R :session *R* :tangle tests/test-header_template.r :exports none :eval no
################################################################
# name:header_template

#+end_src
*** man-header_template
#+name:header_template
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:header_template

#+end_src

** load_template
*** R-load_template
#+name:load_template
#+begin_src R :session *R* :tangle R/load_template.r :exports none :eval no
  ################################################################
  load_template <- function(){
  #   ```{r, echo = TRUE, eval = FALSE}
  ld <- '
  #### load ####
  print(file.path(indir,infile))
  dat <- read.csv(file.path(indir,infile), stringsAsFactors = F)
      
  #### check ####
  str(dat)
  # write down the nrows and ncols here for future reference
  head(dat) 
  tail(dat)
  summary(dat)
  # lapply(dat, table)
  '
  # ```
  return(ld)
  }
  
#+end_src
*** test-load_template
#+name:load_template
#+begin_src R :session *R* :tangle tests/test-load_template.r :exports none :eval no
################################################################
# name:load_template

#+end_src
*** man-load_template
#+name:load_template
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:load_template

#+end_src

** cleaning_template
*** R-cleaning_template
#+name:cleaning_template
#+begin_src R :session *R* :tangle R/cleaning_template.r :exports none :eval no
  ################################################################
  cleaning_template <- function(datevar = "date"){
  #   ```{r echo = T, results = "asis", eval = F}
  txt <- paste('

  #### clean ####
  names(dat) <- lcu(names(dat))    

  ## Dates
  # If you see a date variable need to change it (R reads CSV dates as text)
  # to first test the conversion just do one
  dat$',datevar,'[1]        
  as.Date(dat$',datevar,'[1], format = "%d/%m/%Y")
  # if that worked then do the whole vector
  dat$',datevar,' <- as.Date(dat$',datevar,', format = "%d/%m/%Y")
  table(dat$',datevar,')

  ## nominal variables coded with integers
  # these can be coerced to character
  for(i in c("pqplot", "row", "column")){
    print(table(dat[,i]))
    dat[,i] <- as.character(dat[,i])
  }

  ## Species is a reserved word only allowed for lists of proper names
  # otherwise we use descriptor
  names(dat) <- gsub("species", "fauna_descriptor", names(dat))
  str(dat)

  ', sep = '')
  # ```
  return(txt)
  }
  
#+end_src
*** test-cleaning_template
#+name:cleaning_template
#+begin_src R :session *R* :tangle tests/test-cleaning_template.r :exports none :eval no
  ################################################################
  # name:cleaning_template
  source("R/cleaning_template.r")
  txt <- cleaning_template()
  cat(txt)
#+end_src
*** man-cleaning_template
#+name:cleaning_template
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:cleaning_template

#+end_src

** data_dictionary_template (add outliers)
*** R-data_dictionary_template
#+name:data_dictionary_template
#+begin_src R :session *R* :tangle R/data_dictionary_template.r :exports none :eval no
    
  data_dictionary_template <- function(){
  #   ```{r echo = T, results = "asis", eval = F}
  # NB this may get out of sync with the current dataset, especially if species names columns are added, so the data dictionary that appears in the HTML report is always regenerated

  txt <- paste('

  #### Data Dictionary ####
  ## do a data dictionary and add the variable names and types
  dd <- data_dictionary(show_levels = 20, dat)
  write.csv(dd, file.path(outdir, gsub(".csv","_data_dictionary.csv", outfile)), row.names = F)
  
  #### now get variable names ####
  dd$ordering <- 1:nrow(dd)
  col_defs <- sqldf("
  select Variable, Type
  from dd
  group by Variable, Type
  order by ordering
  ")
  col_defs <- col_defs[col_defs$Variable != "",]
  col_defs

  ## the original names are treated as the labels.  To be expanded on during DDF
  variable_labels <- read.csv(file.path(indir,infile), nrows = 1, header = F, stringsAsFactors = F)
  variable_labels
  vl <- as.data.frame(cbind(col_defs,t(variable_labels[1,])))
  names(vl) <- c("ltern_name", "simple_type", "original_name")
  vl$description <- ""
  vl$nominal_ordinal_interval_ratio_date_time <- ""
  vl$unit_of_measurement <- ""
  vl$value_labels <- ""
  vl$issue_description_and_suggested_change <- ""
  vl$depositor_response <- ""
  vl
  write.csv(vl, file.path(outdir, gsub(".csv","_variable_names_and_labels.csv", outfile)), row.names = F)

  ', sep = '')
  #   ```
  return(txt)
  }
  
#+end_src
*** test-data_dictionary_template
#+name:data_dictionary_template
#+begin_src R :session *R* :tangle tests/test-data_dictionary_template.r :exports none :eval no
################################################################
# name:data_dictionary_template

#+end_src
*** man-data_dictionary_template
#+name:data_dictionary_template
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:data_dictionary_template

#+end_src

** taxonomic_review_template
*** R-taxonomic_review_template
#+name:taxonomic_review_template
#+begin_src R :session *R* :tangle R/taxonomic_review_template.r :exports none :eval no
  ################################################################
  # name:taxonomic_review_template
  
  taxonomic_template <- function(target_col = "species"){
  #  ```{r echo = T, results = "asis", eval = F}    
  txt <- paste('

  #### Taxonomic review ####
  ## If you just want simply summarise the species names
  # tx <- as.data.frame(table(dat$',target_col,'))
  # names(tx) <- c("',target_col,'", "Frequency")
  # write.csv(tx, file.path(outdir, gsub(".csv","_taxonomic_coverage.csv", outfile)), row.names = F)  

  ## Alternately to use taxize to check the list do the following 
  tx <- as.data.frame(table(dat$',target_col,'))
  names(tx) <- c("',target_col,'", "Frequency")
  splist <- tx$',target_col,'
  sources <- gnr_datasources()
  #sources

  ## the following lists have been selected as likely to be reasonable in australia
  eol <- sources$id[sources$title == "EOL"]
  gbif_backbone <- sources$id[sources$title == "GBIF Backbone Taxonomy"]
  ipni <- sources$id[sources$title == "The International Plant Names Index"]
  zk <- sources$id[sources$title == "ZooKeys"]
  zb <- sources$id[sources$title == "ZooBank"]
  #c(eol, gbif_backbone, ipni, zk, zb)
  ## this next big uses the internet to check lists
  out <- gnr_resolve(splist, data_source_ids=c(eol, gbif_backbone, ipni, zk, zb), stripauthority=TRUE)
  
  out2 <- unique(out$results)
  out3 <- sqldf(\'select submitted_name, matched_name2 as match_via_database, max(score) as max_database_score, "" as change_note, "" as update_to
    from out2
    group by submitted_name, matched_name2\')
  out3[which(out3$submitted_name == out3$match_via_database),"max_database_score"] <- ""
  out3[which(out3$submitted_name == out3$match_via_database),"match_via_database"] <- ""
  out3
  ## write out the result for clerical review
  tx_file <- gsub(".csv","_taxonomic_coverage.csv", outfile)
  write.csv(out3, file.path(outdir, tx_file), row.names = F)  

  #### TODO: 
  # you should go to this CSV file and edit the final columns, 
  # take notes on decisions and create the updates list.  Save.
  ####
  
  # Post review merge fixed names and remove old names
  # check the tx file is there, appropriately named
  dir(outdir)
  tx <- read.csv(file.path(outdir, tx_file), stringsAsFactor = F)
  nrow(tx)
  head(tx)
  tx[tx[,grep("change_note", names(tx))]!="",]                                          
  str(dat)
  
  # check that linking variable is identical
  # there are a variety of reasons why these may have gotten out of sync during the clerical review
  idx <- as.data.frame(names(table(dat$",target_col,")))
  names(idx) <- "v1"
  head(idx)
  idy <- as.data.frame(tx$submitted_name)
  names(idy) <- "v1"
  head(idy)
  # which target do not appear in source
  sqldf("select *
  from idx
  left join idy
  on idx.v1 = idy.v1
  where idy.v1 is null")
  # which source do not appear in target
  sqldf("select *
  from idy
  left join idx
  on idy.v1 = idx.v1
  where idx.v1 is null")
  
  # if all good then merge
  dat <- merge(dat, tx, by.x = "',target_col,'", by.y = "submitted_name", all.x = T)
  str(dat)
  
  # reorder cols (col names need to be changed)
  paste(names(dat), collapse = "\',\'", sep = "")
  namelist <- c("visitcode","surveyyear", "',target_col,'")
  
  dat <- dat[,namelist]
  names(dat) <- gsub("update_to" , "',target_col,'", names(dat))
  str(dat)  

  ', sep = "")
  #  ```
  #cat(txt)
  return(txt)
  
  }
#+end_src
*** test-taxonomic_review_template
#+name:taxonomic_review_template
#+begin_src R :session *R* :tangle tests/test-taxonomic_review_template.r :exports none :eval no
  ################################################################
  # name:taxonomic_review_template
  source("R/taxonomic_review_template.r")
  txt <- taxonomic_template()
  #  sink("test.r")
  cat(txt)
  #  sink()
  
#+end_src
*** man-taxonomic_review_template
#+name:taxonomic_review_template
#+begin_src R :session *R* :tangle no :exports none :eval no
  ################################################################
  # name:taxonomic_review_template
  # some species data:
  dat <- data.frame("species" = I(c("Bryum schleicheri", "Bryum capillare", "Bryum argentum", "Escherichia coli", "Glis glis")))
  dat$index = 1:nrow(dat)
  #write.csv(dat, "inst/extdata/taxonomic_dummy_data.csv", row.names=F)
  source("R/taxonomic_review_template.r")
  txt <- taxonomic_template()
  #  sink("test.r")
  cat(txt)
  #  sink()
  
  
  library(taxize)
  library(sqldf)
  getwd()
  outdir <- "."
  outfile <- "test.csv"
  
  #### Taxonomic review ####
  tx <- as.data.frame(table(dat$species))
  names(tx) <- c("species", "Frequency")
  #write.csv(tx, file.path(outdir, gsub(".csv","_taxonomic_coverage.csv", outfile)), row.names = F)  
  # Test new version?
  tx <- as.data.frame(table(dat$species))
  names(tx) <- c("species", "Frequency")
  splist <- tx$species
  sources <- gnr_datasources()
  sources
  
  eol <- sources$id[sources$title == "EOL"]
  gbif_backbone <- sources$id[sources$title == "GBIF Backbone Taxonomy"]
  ipni <- sources$id[sources$title == "The International Plant Names Index"]
  zk <- sources$id[sources$title == "ZooKeys"]
  zb <- sources$id[sources$title == "ZooBank"]
  c(eol, gbif_backbone, ipni, zk, zb)
  out <- gnr_resolve(splist, data_source_ids=c(eol, gbif_backbone, ipni, zk, zb), stripauthority=TRUE)
  
  out2 <- unique(out$results)
  out3 <- sqldf('select submitted_name, matched_name2 as match_via_database, max(score) as max_database_score, "" as change_note, "" as update_to
    from out2
    group by submitted_name, matched_name2')
  out3[which(out3$submitted_name == out3$match_via_database),"max_database_score"] <- ""
  out3[which(out3$submitted_name == out3$match_via_database),"match_via_database"] <- ""
  out3
  #write.csv(out3, file.path(outdir, gsub(".csv","_taxonomic_coverage.csv", outfile)), row.names = F)  
  
  # Post review merge fixed names and remove old names
  dir(file.path(outdir, "tests"))
  tx_file <- "test_eda_taxonomic_coverage.csv"
  tx <- read.csv(file.path(outdir, "tests", tx_file), stringsAsFactor = F)
  nrow(tx)
  head(tx)
  tx[tx[,grep("change_note", names(tx))]!="",]                                          
  str(dat)
  
  # check that linking variable is identical
  idx <- as.data.frame(names(table(dat$species)))
  names(idx) <- "v1"
  head(idx)
  idy <- as.data.frame(tx$submitted_name)
  names(idy) <- "v1"
  head(idy)
  # which target do not appear in source
  #idx[-which(idx %in% idy)]
  sqldf("select *
  from idx
  left join idy
  on idx.v1 = idy.v1
  where idy.v1 is null")
  # which source do not appear in target
  #idy[-which(idy %in% idx)]
  sqldf("select *
  from idy
  left join idx
  on idy.v1 = idx.v1
  where idx.v1 is null")
  
  # if all good then merge
  dat <- merge(dat, tx, by.x = "species", by.y = "submitted_name", all.x = T)
  str(dat)
  
  # reorder cols
  paste(names(dat), collapse = "','", sep = "")
  namelist <- c("update_to", "index")
  
  dat <- dat[,namelist]
  names(dat) <- gsub("update_to" , "species", names(dat))
  str(dat)  
  dat
  
#+end_src
** eml_template
*** R-eml_template
#+name:eml_template
#+begin_src R :session *R* :tangle R/eml_template.r :exports none :eval no
  ################################################################
  eml_template <- function(outfile=outfile){
  txt <- sprintf('

  #### Write out a CSV and an EML file ####
  unit_defs <- reml_boilerplate(dat, enumerated = NA)
  col_defs <- names(dat)
  ds <- eml_dataTable(dat,
                col.defs = col_defs,
                unit.defs = unit_defs,
                description = "TBA", 
                filename = "%s")
  # now write EML metadata file
  eml_config(creator="TBA")
  eml_write(ds,
            file = "%s",
            title = "TBA"
  )
  ', outfile, gsub(".csv", ".xml", outfile)
  )
  
  return(txt)
  }
  
#+end_src
*** test-eml_template
#+name:eml_template
#+begin_src R :session *R* :tangle tests/test-eml_template.r :exports none :eval no
################################################################
# name:eml_template

#+end_src
*** man-eml_template
#+name:eml_template
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:eml_template

#+end_src
** geographic_template
*** R-geographic_template
#+name:geographic_template
#+begin_src R :session *R* :tangle R/geographic_template.r :exports none :eval no
  ################################################################
  geographic_template <- function(titl, indir){
  txt <- sprintf('
  %s Geographic Coverage 
  ---
  
  - plots are shown in map
  
  ![alttext](map.png)
  
  ```{r echo = TRUE, results = "asis", eval = FALSE}
  #require(devtools)
  #install_github("disentangle", "ivanhanigan")
  require(disentangle)
  require(xtable)
  require(rgdal)
  require(gisviz)
  
  ## if using coordinates supplied
  gis_dir <- "%s"
  flist <- dir(gis_dir)
  #flist
  # flist[grep(XXX, flist)]
  fi = "xxx.shp"
  #d <- read.csv()
  #epsg <- make_EPSG()
  ## epsg[grep("GDA94$", epsg$note),]
  #projection  <- "4283"
  #shp <- SpatialPointsDataFrame(cbind(d$lon, d$lat), d,
  #  proj4string=CRS(epsg$prj4[grep(projection,epsg$code)]))
  
  wd <- getwd()
  setwd(gis_dir)
  shp <- readOGR(fi,
                 gsub(".shp", "", basename(fi))
                 )
  setwd(wd)
  #str(shp)
  loc  <- morpho_bounding_box(x = shp)
  #loc
  png("map.png")
  plotMyMap(shp, xl = c(100,155), yl = c(-45, -10))
  dev.off()
  print(xtable(loc), type = "html")
  ```
  ', titl, indir)
  return(txt)
  }
  
  
#+end_src
*** test-geographic_template
#+name:geographic_template
#+begin_src R :session *R* :tangle tests/test-geographic_template.r :exports none :eval no
################################################################
# name:geographic_template

#+end_src
*** man-geographic_template
#+name:geographic_template
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:geographic_template

#+end_src

** reshape_template
*** R-reshape_emplate
#+name:reshape_emplate
#+begin_src R :session *R* :tangle R/reshape_emplate.r :exports none :eval no
################################################################
# name:reshape_emplate

#+end_src
*** test-reshape_emplate
#+name:reshape_emplate
#+begin_src R :session *R* :tangle tests/test-reshape_emplate.r :exports none :eval no
################################################################
# name:reshape_emplate

#+end_src
*** man-reshape_emplate
#+name:reshape_emplate
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:reshape_emplate

#+end_src
** visualisation_template
*** R-visualisation_template
#+name:visualisation_template
#+begin_src R :session *R* :tangle R/visualisation_template.r :exports none :eval no
################################################################
# name:visualisation_template

#+end_src
*** test-visualisation_template
#+name:visualisation_template
#+begin_src R :session *R* :tangle tests/test-visualisation_template.r :exports none :eval no
################################################################
# name:visualisation_template

#+end_src
*** man-visualisation_template
#+name:visualisation_template
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:visualisation_template

#+end_src
