#+TITLE:exploratory analysis template 
#+AUTHOR: Ivan Hanigan
#+email: ivan.hanigan@anu.edu.au
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper]
#+LATEX: \tableofcontents
-----
* Introduction
This is designed to create code snippets.  These can be used as standalone R scripts or incorporated into complicated workflows such as ProjectTemplage.
* R
** exploratory_analysis_template
*** exploratory_analysis_template
#+name:exploratory_analysis_template
#+begin_src R :session *R* :tangle R/exploratory_analysis_template.r :exports none :eval no
  ################################################################
  exploratory_analysis_template <- function(
      projdir = ""
    ,
      packagedir =  ""
    ,
      outfile = ""
    ,
      indir = ""
    ,
      infile = ""
    ,
      titl = ""
    ,
      show_header = T
    ,
      show_geo = T  
      ){
    
  txt <- taxonomic_template(target_col = "species")
  if(show_header){
  hd <- sprintf('
  %s
  ---
  
  ```{r echo = T, results = "asis", eval = T}
  projdir <- "%s"
  outdir <- file.path(projdir, "%s")
  # if(!file.exists(outdir)) dir.create(outdir)
  outfile <- "%s"
  file.path(outdir, outfile) 
  setwd(outdir)
  ```
  ```{r, echo = TRUE, eval = FALSE}
  library(gdata)
  library(disentangle)
  library(EML)
  library(sqldf)
  library(taxize)
  indir <- "%s"
  
  dir(indir)
  infile <- "%s"
  
  #### load ####
  print(file.path(indir,infile))
  dat <- read.csv(file.path(indir,infile), stringsAsFactors = F)
    
  #### check ####
  str(dat)
  
  head(dat) 
  tail(dat)
  ```
  ', titl, projdir, packagedir, outfile, indir, infile
  )
  txt <- paste(hd, txt) 
  }
  
  # cat(txt)
  
  return(txt)
  }
    
#+end_src
*** test-exploratory_analysis_template
#+name:exploratory_analysis_template
#+begin_src R :session *R* :tangle tests/test-exploratory_analysis_template.r :exports none :eval no
  ################################################################
  # name:exploratory_analysis_template
  library(devtools)
  load_all()
  textdata <- exploratory_analysis_template(
    projdir = "~/tools/exploratory_analysis_template"
  ,
    packagedir =  "tests"
  ,
    outfile = "test_eda.csv"
  ,
    indir = "~/tools/exploratory_analysis_template/inst/extdata"
  ,
    infile = "taxonomic_dummy_data.csv"
  ,
    titl = "Testing taxonomic review code snippet"
  ,
    show_header = T
  ,
    show_geo = F
    )
  cat(textdata)
  # check the codes, if ok sink to a r markdown script
  sink("tests/test_taxo_review.Rmd")
  cat(textdata)
  sink()
  
#+end_src
*** man-exploratory_analysis_template
#+name:exploratory_analysis_template
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:exploratory_analysis_template

#+end_src

** taxonomic_review_template
*** R-taxonomic_review_template
#+name:taxonomic_review_template
#+begin_src R :session *R* :tangle R/taxonomic_review_template.r :exports none :eval no
  ################################################################
  # name:taxonomic_review_template
  
  taxonomic_template <- function(target_col = "species"){
    
  txt <- paste('
  ```{r echo = T, results = "asis", eval = F}
  #### Taxonomic review ####
  tx <- as.data.frame(table(dat$',target_col,'))
  names(tx) <- c("',target_col,'", "Frequency")
  write.csv(tx, file.path(outdir, gsub(".csv","_taxonomic_coverage.csv", outfile)), row.names = F)  
  # Test new version?
  tx <- as.data.frame(table(dat$',target_col,'))
  names(tx) <- c("',target_col,'", "Frequency")
  splist <- tx$',target_col,'
  sources <- gnr_datasources()
  sources
  
  eol <- sources$id[sources$title == "EOL"]
  gbif_backbone <- sources$id[sources$title == "GBIF Backbone Taxonomy"]
  ipni <- sources$id[sources$title == "The International Plant Names Index"]
  zk <- sources$id[sources$title == "ZooKeys"]
  zb <- sources$id[sources$title == "ZooBank"]
  c(eol, gbif_backbone, ipni, zk, zb)
  out <- gnr_resolve(splist, data_source_ids=c(eol, gbif_backbone, ipni, zk, zb), stripauthority=TRUE)
  
  out2 <- unique(out$results)
  out3 <- sqldf(\'select submitted_name, matched_name2 as match_via_database, max(score) as max_database_score, "" as change_note, "" as update_to
    from out2
    group by submitted_name, matched_name2\')
  out3[which(out3$submitted_name == out3$match_via_database),"max_database_score"] <- ""
  out3[which(out3$submitted_name == out3$match_via_database),"match_via_database"] <- ""
  out3
  write.csv(out3, file.path(outdir, gsub(".csv","_taxonomic_coverage.csv", outfile)), row.names = F)  
  #### TODO: 
  # you should go to this CSV file and edit the final columns, 
  # take notes on decisions and create the updates list.  Save as new file with 2.csv at end.
  ####

  # Post review merge fixed names and remove old names
  dir(outdir)
  tx_file <- "xxx_taxonomic_coverage2.csv"
  tx <- read.csv(file.path(outdir, tx_file), stringsAsFactor = F)
  nrow(tx)
  head(tx)
  tx[tx[,grep("change_note", names(tx))]!="",]                                          
  str(dat)
  
  # check that linking variable is identical
  idx <- names(table(dat$',target_col,'))
  head(idx)
  idy <- tx$submitted_name
  head(idy)
  idx[-which(idx in idy)]
  idy[-which(idy in idx)]
  
  # if all good then merge
  dat <- merge(dat, tx, by.x = "',target_col,'", by.y = "submitted_name", all.x = T)
  str(dat)
  
  # reorder cols
  paste(names(dat), collapse = "\',\'", sep = "")
  namelist <- c("visitcode","surveyyear", "',target_col,'")
  
  dat <- dat[,namelist]
  names(dat) <- gsub("update_to" , "',target_col,'", names(dat))
  str(dat)  
  ```
  ', sep = "")
  #cat(txt)
  return(txt)
  
  }
#+end_src
*** test-taxonomic_review_template
#+name:taxonomic_review_template
#+begin_src R :session *R* :tangle tests/test-taxonomic_review_template.r :exports none :eval no
  ################################################################
  # name:taxonomic_review_template
  source("R/taxonomic_review_template.r")
  txt <- taxonomic_template()
  #  sink("test.r")
  cat(txt)
  #  sink()
  
#+end_src
*** man-taxonomic_review_template
#+name:taxonomic_review_template
#+begin_src R :session *R* :tangle no :exports none :eval no
  ################################################################
  # name:taxonomic_review_template
  # some species data:
  dat <- data.frame("species" = I(c("Bryum schleicheri", "Bryum capillare", "Bryum argentum", "Escherichia coli", "Glis glis")))
  dat$index = 1:nrow(dat)
  write.csv(dat, "inst/extdata/taxonomic_dummy_data.csv", row.names=F)
  source("R/taxonomic_review_template.r")
  txt <- taxonomic_template()
  #  sink("test.r")
  cat(txt)
  #  sink()
  
  
  library(taxize)
  library(sqldf)
  outdir <- "."
  outfile <- "test.csv"
  
  #### Taxonomic review ####
  tx <- as.data.frame(table(dat$species))
  names(tx) <- c("species", "Frequency")
  write.csv(tx, file.path(outdir, gsub(".csv","_taxonomic_coverage.csv", outfile)), row.names = F)  
  # Test new version?
  tx <- as.data.frame(table(dat$species))
  names(tx) <- c("species", "Frequency")
  splist <- tx$species
  sources <- gnr_datasources()
  sources
  
  eol <- sources$id[sources$title == "EOL"]
  gbif_backbone <- sources$id[sources$title == "GBIF Backbone Taxonomy"]
  ipni <- sources$id[sources$title == "The International Plant Names Index"]
  zk <- sources$id[sources$title == "ZooKeys"]
  zb <- sources$id[sources$title == "ZooBank"]
  c(eol, gbif_backbone, ipni, zk, zb)
  out <- gnr_resolve(splist, data_source_ids=c(eol, gbif_backbone, ipni, zk, zb), stripauthority=TRUE)
  
  out2 <- unique(out$results)
  out3 <- sqldf('select submitted_name, matched_name2 as match_via_database, max(score) as max_database_score, "" as change_note, "" as update_to
    from out2
    group by submitted_name, matched_name2')
  out3[which(out3$submitted_name == out3$match_via_database),"max_database_score"] <- ""
  out3[which(out3$submitted_name == out3$match_via_database),"match_via_database"] <- ""
  out3
  write.csv(out3, file.path(outdir, gsub(".csv","_taxonomic_coverage.csv", outfile)), row.names = F)  
  
  # Post review merge fixed names and remove old names
  dir(outdir)
  tx_file <- "test_taxonomic_coverage.csv"
  tx <- read.csv(file.path(outdir, tx_file), stringsAsFactor = F)
  nrow(tx)
  head(tx)
  tx[tx[,grep("change_note", names(tx))]!="",]                                          
  str(dat)
  
  # check that linking variable is identical
  idx <- names(table(dat$species))
  head(idx)
  idy <- tx$submitted_name
  head(idy)
  idx[-which(idx %in% idy)]
  idy[-which(idy %in% idx)]
  
  # if all good then merge
  dat <- merge(dat, tx, by.x = "species", by.y = "submitted_name", all.x = T)
  str(dat)
  
  # reorder cols
  paste(names(dat), collapse = "','", sep = "")
  namelist <- c("update_to", "index")
  
  dat <- dat[,namelist]
  names(dat) <- gsub("update_to" , "species", names(dat))
  str(dat)  
  dat
  
#+end_src
